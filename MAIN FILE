//ILLION CAPITAL A.I PRO
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LudoGH68
import TradingView/Strategy/3

//@version=5
strategy("ILLION CAPITAL A.I PRO", overlay = true)
import LudoGH68/Drawings_public/1 as d

getLineStyle(lineOption) =>
    lineOption == "┈" ? line.style_dotted : lineOption == "╌" ? line.style_dashed : line.style_solid

get_structure_highest_bar(lookback) =>

	var int idx = 0
    maxBar = bar_index > lookback ? ta.highestbars(high, lookback) : ta.highestbars(high, bar_index + 1)

	for i = 0 to lookback - 1 by 1
		if high[i+1] > high[i+2] and high[i] <= high[i+1] and ((i+1) * -1) >= maxBar
			idx := (i+1) * -1
			//break
            
	idx := idx == 0 ? maxBar : idx 

get_structure_lowest_bar(lookback) =>

	var int idx = 0
    minBar = bar_index > lookback ? ta.lowestbars(low, lookback) : ta.lowestbars(low, bar_index + 1)

	for i = 0 to lookback - 1 by 1
		if low[i+1] < low[i+2] and low[i] >= low[i+1]  and ((i+1) * -1) >= minBar
			idx := (i+1) * -1
            //break
			
	idx := idx == 0 ? minBar : idx 

is_structure_high_broken(_highStructBreakPrice, _structureHigh, _structureHighStartIndex, _structureDirection) =>
    var bool res = false

    if (_highStructBreakPrice > _structureHigh and  bar_index[1] >  _structureHighStartIndex) or (_structureDirection == 1 and _highStructBreakPrice > _structureHigh)
        res := true
    else
        res := false

    res

// Fair Value Gap
isFvgToShow =  input(true, title='Display FVG', group="Fair Value Gap")
bullishFvgColor = input(color.new(color.green, 50), 'Bullish FVG Color', group="Fair Value Gap")
bearishFvgColor = input(color.new(color.red, 50), 'Bearish FVG Color', group="Fair Value Gap")
mitigatedFvgColor = input(color.new(color.gray, 50), 'Mitigated FVG Color', group="Fair Value Gap")
fvgHistoryNbr = input.int(5, 'Number of FVG to show', minval=1, maxval=50)
isMitigatedFvgToReduce = input(false, title='Reduce mitigated FVG', group="Fair Value Gap")

// Structures
isStructBodyCandleBreak = input(true, title='Break with candle\'s body', group="Structures")
isCurrentStructToShow = input(true, title='Display current structure', group="Structures")
bullishBosColor = input(color.silver, 'Bullish BOS Color', group="Structures")
bearishBosColor = input(color.silver, 'Bearish BOS Color', group="Structures")
bosLineStyleOption = input.string("─", title="BOS Style", group="Structures", options=["─", "┈", "╌"])
bosLineStyle = getLineStyle(bosLineStyleOption)
bosLineWidth = input.int(1, title="BOS Width", group="Structures", minval=1, maxval=5)
bullishChochColor = input(color.yellow, 'Bullish CHoCH Color', group="Structures")
bearishChochColor = input(color.yellow, 'Bearish CHoCH Color', group="Structures")
chochLineStyleOption = input.string("─", title="CHoCH Style", group="Structures", options=["─", "┈", "╌"])
chochLineStyle = getLineStyle(chochLineStyleOption)
chochLineWidth = input.int(1, title="MSB Width", group="Structures", minval=1, maxval=5)
currentStructColor = input(color.blue, 'Current structure Color', group="Structures")
currentStructLineStyleOption = input.string("─", title="Current structure Style", group="Structures", options=["─", "┈", "╌"])
currentStructLineStyle = getLineStyle(currentStructLineStyleOption)
currentStructLineWidth = input.int(1, title="Current structure Width", group="Structures", minval=1, maxval=5)
structHistoryNbr = input.int(10, 'Number of break to show', minval=1, maxval=50)

// Fibonacci 1
isFibo1ToShow = input(true, title = "", group="Structure Fibonacci", inline = "Fibo1")
fibo1Value = input.float(1.0, title = "", group="Structure Fibonacci", inline = "Fibo1")  // Update to 1.0
fibo1Color = input(#64b5f6, title = "", group="Structure Fibonacci", inline = "Fibo1")
fibo1StyleOption = input.string("─", title = "", group="Structure Fibonacci", options=["─", "┈", "╌"], inline = "Fibo1")
fibo1Style = getLineStyle(fibo1StyleOption)
fibo1LineWidth = input.int(1, title = "", group="Structure Fibonacci", minval=1, maxval=5, inline = "Fibo1")


// Fibonacci 4
isFibo4ToShow = input(true, title = "", group="Structure Fibonacci", inline = "Fibo4")
fibo4Value = input.float(0.0, title = "", group="Structure Fibonacci", inline = "Fibo4")  // Update to 0.0
fibo4Color = input(#64b5f6, title = "", group="Structure Fibonacci", inline = "Fibo4")
fibo4StyleOption = input.string("─", title = "", group="Structure Fibonacci", options=["─", "┈", "╌"], inline = "Fibo4")
fibo4Style = getLineStyle(fibo4StyleOption)
fibo4LineWidth = input.int(1, title = "", group="Structure Fibonacci", minval=1, maxval=5, inline = "Fibo4")

// Fibonacci 5


// Draw FVG into graph
FVGDraw(_boxes, _fvgTypes, _isFvgMitigated) => 

    // Loop into all values of the array
    for [index, value] in _boxes
        
        // Processing bullish FVG
        if(array.get(_fvgTypes, index))

            // Check if FVG has been totally mitigated
            if(low <= box.get_bottom(value))
                array.remove(_boxes, index)
                array.remove(_fvgTypes, index)
                array.remove(_isFvgMitigated, index)
                box.delete(value)
            else 
                if(low < box.get_top((value)))
                    box.set_bgcolor(value, mitigatedFvgColor)    

                    // Mitigated FVG Alert
                    if(not(array.get(_isFvgMitigated, index)))
                        alert("FVG has been mitigated", alert.freq_once_per_bar)
                        array.set(_isFvgMitigated, index, true)

                    // Reduce FVG if needed
                    if(isMitigatedFvgToReduce)
                        box.set_top(value, low)

                box.set_right(value, bar_index)

        // Processing bearish FVG
        else

            // Check if FVG has been mitigated
            if(high >= box.get_top(value))
                array.remove(_boxes, index)
                array.remove(_fvgTypes, index)
                array.remove(_isFvgMitigated, index)
                box.delete(value)
            else
                if(high > box.get_bottom((value)))
                    box.set_bgcolor(value, mitigatedFvgColor)    

                    // Mitigated FVG Alert
                    if(not(array.get(_isFvgMitigated, index)))
                        alert("FVG has been mitigated", alert.freq_once_per_bar)
                        array.set(_isFvgMitigated, index, true)

                    // Reduce FVG if needed
                    if(isMitigatedFvgToReduce)
                        box.set_bottom(value, high)

                box.set_right(value, bar_index)

// Arrays variable
var array<line> structureLines = array.new_line(0)
var array<label> structureLabels = array.new_label(0)
var array<box>  fvgBoxes = array.new_box(0)
var array<bool> fvgTypes = array.new_bool(0)
var array<bool> isFvgMitigated = array.new_bool(0)

// Price variables
var float structureHigh = 0.0
var float structureLow = 0.0
var float fibo1Price = 0.0
var float fibo2Price = 0.0
var float fibo3Price = 0.0
var float fibo4Price = 0.0
var float fibo5Price = 0.0

// Index variable
var int structureHighStartIndex = 0
var int structureLowStartIndex = 0
var int structureDirection = 0
var int fibo1StartIndex = 0
var int fibo2StartIndex = 0
var int fibo3StartIndex = 0
var int fibo4StartIndex = 0
var int fibo5StartIndex = 0

// Line variable
var line structureHighLine = na
var line structureLowLine = na
var line fibo1Line = na
var line fibo2Line = na
var line fibo3Line = na
var line fibo4Line = na
var line fibo5Line = na

// Label variable
var label fibo1Label = na
var label fibo2Label = na
var label fibo3Label = na
var label fibo4Label = na
var label fibo5Label = na
//
//
// ==========================================================================================
//                              FAIR VALUE GAP FINDER PROCESSING                                                                         
// ==========================================================================================
//
//
// Define FVG type
isBullishFVG = high[3] < low[1]
isBearishFVG = low[3] > high[1]

// Bullish FVG process
if(isBullishFVG and isFvgToShow)

    // Add FVG into FVG's array
    box _box = box.new(left=bar_index - 2, top=low[1], right=bar_index[1], bottom=high[3], border_style=line.style_solid, border_width=1, bgcolor=bullishFvgColor, border_color=color.new(color.green, 100))
    array.push(fvgBoxes, _box)
    array.push(fvgTypes, true)
    array.push(isFvgMitigated, false)

    // Check if FVG to show is upper than user parameter
    if(array.size(fvgBoxes) > fvgHistoryNbr + 1)

        // Delete the FVG and its index from arrays
        box.delete(array.get(fvgBoxes, 0))
        array.remove(fvgBoxes, 0)
        array.remove(fvgTypes, 0)
        array.remove(isFvgMitigated, 0)

// Bearish FVG process
if(isBearishFVG and isFvgToShow)
    
    // Add FVG into FVG's array
    box _box = box.new(left=bar_index - 2, top=low[3], right=bar_index[1], bottom=high[1], border_style=line.style_solid, border_width=1, bgcolor=bearishFvgColor, border_color=color.new(color.red, 100))
    array.push(fvgBoxes, _box)
    array.push(fvgTypes, false)
    array.push(isFvgMitigated, false)

    // Check if FVG to show is upper than user parameter
    if(array.size(fvgBoxes) > fvgHistoryNbr + 1)
        
        // Delete the FVG and its index from arrays
        box.delete(array.get(fvgBoxes, 0))
        array.remove(fvgBoxes, 0)
        array.remove(fvgTypes, 0)
        array.remove(isFvgMitigated, 0)

// Draw FVG
FVGDraw(fvgBoxes, fvgTypes, isFvgMitigated)
//
//
// ==========================================================================================
//                                   STRUCTURES PROCESSING                                                         
// ==========================================================================================
//
//
// Initialize value for bar 0
if(bar_index == 0)
    structureHighStartIndex := bar_index
    structureLowStartIndex  := bar_index
    structureHigh := high
    structureLow  := low 

highest = bar_index > 10 ? ta.highest(10) : ta.highest(bar_index + 1)
highestBar = bar_index > 10 ? ta.highestbars(high, 10) : ta.highestbars(high, bar_index + 1) 
lowest = bar_index > 10 ? ta.lowest(10) : ta.lowest(bar_index + 1)
lowestBar = bar_index > 10 ? ta.lowestbars(low, 10) : ta.lowestbars(low, bar_index + 1)
structureMaxBar = bar_index + get_structure_highest_bar(10)
structureMinBar = bar_index + get_structure_lowest_bar(10)
lowStructBreakPrice = isStructBodyCandleBreak ? close : low
highStructBreakPrice = isStructBodyCandleBreak ? close : high
isStuctureLowBroken = (lowStructBreakPrice < structureLow and lowStructBreakPrice[1] >= structureLow and lowStructBreakPrice[2] >= structureLow and lowStructBreakPrice[3] >= structureLow and bar_index[1] >  structureLowStartIndex and bar_index[2] >  structureLowStartIndex and bar_index[3] >  structureLowStartIndex) or (structureDirection == 2 and lowStructBreakPrice < structureLow)
isStructureHighBroken = (highStructBreakPrice > structureHigh and highStructBreakPrice[1] <= structureHigh and highStructBreakPrice[2] <= structureHigh and highStructBreakPrice[3] <= structureHigh and bar_index[1] >  structureHighStartIndex and bar_index[2] >  structureHighStartIndex and bar_index[3] >  structureHighStartIndex) or (structureDirection == 1 and highStructBreakPrice > structureHigh)
 

//if((low < structureLow and low[1] >= structureLow and low[2] >= structureLow and low[3] >= structureLow and bar_index[1] >  structureLowStartIndex and bar_index[2] >  structureLowStartIndex and bar_index[3] >  structureLowStartIndex) or (structureDirection == 2 and low < structureLow))
if(isStuctureLowBroken)
    // Check if structures to show is upper than user parameter
    if(array.size(structureLines) >= structHistoryNbr)

        // Delete the line and its index from arrays
        d.delete_line(array.get(structureLines, 0), array.get(structureLabels, 0))
        array.remove(structureLabels, 0)
        array.remove(structureLines, 0)
        

    // Create BOS line
    if(structureDirection != 1)  
        array.push(structureLines, line.new(structureLowStartIndex, structureLow, bar_index, structureLow, xloc=xloc.bar_index, extend=extend.none, color=bearishChochColor, style=chochLineStyle, width=chochLineWidth))
        array.push(structureLabels, label.new((bar_index + structureLowStartIndex) / 2, structureLow, text="CISD", style=label.style_none, textcolor=bearishChochColor))
 

   
    // Update values for new structure 
    structureDirection := 1
    structureHighStartIndex := structureMaxBar
    structureLowStartIndex  := bar_index
    structureHigh :=  high[bar_index - structureHighStartIndex] //highest
    structureLow  := low

// Check for breakout
else if(isStructureHighBroken)
    
    // Check if structures to show is upper than user parameter
    if(array.size(structureLines) >= structHistoryNbr)

        // Delete the line and its index from arrays
        d.delete_line(array.get(structureLines, 0), array.get(structureLabels, 0))
        array.remove(structureLabels, 0)
        array.remove(structureLines, 0)

    // Create CISD line
    if(structureDirection != 2)  
        array.push(structureLines, line.new(structureHighStartIndex, structureHigh, bar_index, structureHigh, xloc=xloc.bar_index, extend=extend.none, color=bullishChochColor, style=chochLineStyle, width=chochLineWidth))
        array.push(structureLabels, label.new((bar_index + structureHighStartIndex) / 2, structureHigh, text="CISD", style=label.style_none, textcolor=bullishChochColor))

    

    // Update values for new structure
    structureDirection := 2
    structureHighStartIndex := bar_index 
    structureLowStartIndex  := structureMinBar
    structureHigh := high 
    structureLow  := low[bar_index - structureLowStartIndex] //lowest
else
    if(high > structureHigh and (structureDirection == 0 or structureDirection == 2))
        if(not(isStructBodyCandleBreak) or not(isStructBodyCandleBreak and bar_index[1] > structureHighStartIndex and bar_index[2] >  structureHighStartIndex and bar_index[3] > structureHighStartIndex))
            structureHigh := high
            structureHighStartIndex := bar_index
    else if(low < structureLow and (structureDirection == 0 or structureDirection == 1))
        if(not(isStructBodyCandleBreak) or not(isStructBodyCandleBreak and bar_index[1] > structureLowStartIndex and bar_index[2] > structureLowStartIndex and bar_index[3] > structureLowStartIndex))
            structureLow := low
            structureLowStartIndex := bar_index

structureRange = math.abs(structureHigh - structureLow)

// Display of the current structure
if(isCurrentStructToShow)
    d.delete_line(structureHighLine, na)
    d.delete_line(structureLowLine, na)
    structureHighLine := line.new(structureHighStartIndex, structureHigh, bar_index, structureHigh, xloc.bar_index, color=currentStructColor, style = currentStructLineStyle, width = currentStructLineWidth)
    structureLowLine := line.new(structureLowStartIndex, structureLow, bar_index, structureLow, xloc.bar_index, color=currentStructColor, style = currentStructLineStyle, width = currentStructLineWidth)

    // Display of Fibonacci 1 of the current structure
    if(isFibo1ToShow)
        d.delete_line(fibo1Line, fibo1Label)
        fibo1Price := structureDirection == 1 ? structureHigh - (structureRange - structureRange * fibo1Value) : structureLow + (structureRange - structureRange * fibo1Value)
        fibo1StartIndex := structureDirection == 1 ? structureHighStartIndex : structureLowStartIndex  
        fibo1Line := line.new(fibo1StartIndex, fibo1Price, bar_index, fibo1Price, xloc.bar_index, color = fibo1Color, style = fibo1Style, width = fibo1LineWidth)
        fibo1Label := label.new(bar_index + 20, fibo1Price, text = str.tostring(fibo1Value) + "(" + str.tostring(fibo1Price) + ")", style = label.style_none, textcolor = fibo1Color) 

    // Display of Fibonacci 2 of the current structure
    
    // ADisplay of Fibonacci 4 of the current structure
    if(isFibo4ToShow)
        d.delete_line(fibo4Line, fibo4Label)
        fibo4Price := structureDirection == 1 ? structureHigh - (structureRange - structureRange * fibo4Value) : structureLow + (structureRange - structureRange * fibo4Value)
        fibo4StartIndex := structureDirection == 1 ? structureHighStartIndex : structureLowStartIndex  
        fibo4Line := line.new(fibo4StartIndex, fibo4Price, bar_index, fibo4Price, xloc.bar_index, color = fibo4Color, style = fibo4Style, width = fibo4LineWidth)
        fibo4Label := label.new(bar_index + 20, fibo4Price, text = str.tostring(fibo4Value) + "(" + str.tostring(fibo4Price) + ")", style = label.style_none, textcolor = fibo4Color) 

    // Display of Fibonacci 5 of the current structure
 

plot(na)

// 📦 DXY data ophalen
dxyHigh = request.security("TVC:DXY", timeframe.period, high)
dxyLow  = request.security("TVC:DXY", timeframe.period, low)

// ⚙️ Instellingen
lookback = input.int(2, "Lookback", minval=1)
tolerance = input.float(0.999, "Vergelijkingsmarge")
liveOnly = input.bool(false, "Alleen live candle handelen")

// 📈 EMA en sessie
ema = ta.ema(close, 50)
hourNow = hour(time(timeframe.period))
sessieOpen = hourNow >= 8 and hourNow < 18

// 🧠 Anti-SMT logica
prevEurHigh = ta.highest(high[1], lookback)
prevDxyLow  = ta.lowest(dxyLow[1], lookback)
eurMakesNewHigh = high[1] > prevEurHigh * tolerance
dxyHoudtStand   = dxyLow[1] >= prevDxyLow * tolerance
antiSMTShort = eurMakesNewHigh and dxyHoudtStand

prevEurLow  = ta.lowest(low[1], lookback)
prevDxyHigh = ta.highest(dxyHigh[1], lookback)
eurMakesNewLow = low[1] < prevEurLow / tolerance
dxyHoudtStandUp = dxyHigh[1] <= prevDxyHigh / tolerance
antiSMTLong = eurMakesNewLow and dxyHoudtStandUp

// 📦 FVG-condities
bearFVG = low[1] > high[3]
bullFVG = high[1] < low[3]
bearTop = low[1]
bearBot = high[3]
bullTop = low[3]
bullBot = high[1]

bearTouched = (low <= bearTop and low >= bearBot) or (low[1] <= bearTop and low[1] >= bearBot)
bullTouched = (high >= bullBot and high <= bullTop) or (high[1] >= bullBot and high[1] <= bullTop)

// ✅ Entry conditions
candle2 = barstate.isrealtime or not liveOnly
showShort = antiSMTShort and bearFVG and bearTouched and close < ema and sessieOpen and candle2
showLong  = antiSMTLong and bullFVG and bullTouched and close > ema and sessieOpen and candle2

// 📦 FVG-boxen (blijvend, niet hertekend)
var box[] bearBoxes = array.new_box()
var box[] bullBoxes = array.new_box()
var label[] tradeLabels = array.new_label()

if bearFVG
    kleurBear = bearTouched ? color.blue : color.red
    bearBox = box.new(bar_index - 3, bearTop, bar_index - 1, bearBot, border_color=kleurBear, bgcolor=color.new(kleurBear, 85))
    array.push(bearBoxes, bearBox)

if bullFVG
    kleurBull = bullTouched ? color.blue : color.green
    bullBox = box.new(bar_index - 3, bullTop, bar_index - 1, bullBot, border_color=kleurBull, bgcolor=color.new(kleurBull, 85))
    array.push(bullBoxes, bullBox)

// 🏷️ Tekstlabels vast aan candles
if showShort
    lbl = label.new(bar_index, high, "SELL", style=label.style_label_down, color=color.red, textcolor=color.white)
    array.push(tradeLabels, lbl)

if showLong
    lbl = label.new(bar_index, low, "BUY", style=label.style_label_up, color=color.green, textcolor=color.white)
    array.push(tradeLabels, lbl)

// 🔔 Alerts
alertcondition(showShort, title="Short Alert", message="🚨 SELL signal from Illion Capital A.I PRO")
alertcondition(showLong, title="Long Alert", message="🚨 BUY signal from Illion Capital A.I PRO")
